name: Pull Request
on: [pull_request]
jobs:
  commitlint:
    #
    # ensure conventional commits are followed
    #
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: npm install --save-dev @commitlint/{config-conventional,cli}
      - run: npx commitlint --from=${{ github.event.pull_request.base.sha }}
  lint:
    #
    # run golangci-lint
    #
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          node-version: '^1'
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
  test:
    #
    # ensure go standards and tests pass
    #
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # List of go versions to test on.
        go: ['^1']
    steps:
      # Checkout go code to test.
      - name: Checkout repo
        uses: actions/checkout@v3
      # Setup Go for each version in the matrix.
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go }}
      # Vendor every Go module.
      - name: go mod vendor
        run: find . -name vendor -prune -o -name go.mod -print | xargs -n1 dirname | xargs -n1 -I{} bash -c "pushd {}; go mod vendor"
      # Go vet every Go module.
      - name: go vet
        run: find . -name vendor -prune -o -name go.mod -print | xargs -n1 dirname | xargs -n1 -I{} bash -c "pushd {}; go vet ./..."
      # Run unit tests for every Go module.
      - name: go test
        run: find . -name vendor -prune -o -name go.mod -print | xargs -n1 dirname | xargs -n1 -I{} bash -c "pushd {}; go test -mod=vendor --race -v ./..."
